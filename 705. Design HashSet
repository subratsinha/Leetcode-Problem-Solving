Design a HashSet without using any built-in hash table libraries.

Implement MyHashSet class:

void add(key) Inserts the value key into the HashSet.
bool contains(key) Returns whether the value key exists in the HashSet or not.
void remove(key) Removes the value key in the HashSet. If key does not exist in the HashSet, do nothing.
 

Example 1:

Input
["MyHashSet", "add", "add", "contains", "contains", "add", "contains", "remove", "contains"]
[[], [1], [2], [1], [3], [2], [2], [2], [2]]
Output
[null, null, null, true, false, null, true, null, false]

Explanation
MyHashSet myHashSet = new MyHashSet();
myHashSet.add(1);      // set = [1]
myHashSet.add(2);      // set = [1, 2]
myHashSet.contains(1); // return True
myHashSet.contains(3); // return False, (not found)
myHashSet.add(2);      // set = [1, 2]
myHashSet.contains(2); // return True
myHashSet.remove(2);   // set = [1]
myHashSet.contains(2); // return False, (already removed)
 

Constraints:

0 <= key <= 106
At most 104 calls will be made to add, remove, and contains.


///////////////////////////////////////////////////////////////////////////////// SOLUTION /////////////////////////////////////////////////////////////////////////////


class MyHashSet {
    struct Node {
        int digit;
        bool val;
        vector<Node *> children;
        
        Node(int digit) {
            this->val = false;
            this->digit = digit;
        }
    };
    
    Node *root;
public:
    MyHashSet() {
        root = new Node(0);
    }
    
    void add(int key) {
        if(key == 0) {
            root->val = true;
            return;
        }
        
        Node *cur = root;
        
        while(key) {
            bool found = false;
            
            for(auto i:cur->children) {
                if(i->digit == key%10) {
                    found = true;
                    cur = i;
                    break;
                }
            }
            
            if(!found) {
                cur->children.push_back(new Node(key%10));
                cur = cur->children.back();
            }
            
            key /= 10;
        }
        
        cur->val = true;
    }
    
    void remove(int key) {
        if(key == 0) {
            root->val = false;
            return;
        }
        
        Node *cur = root;
        
        while(key) {
            bool found = false;
            
            for(auto i:cur->children) {
                if(i->digit == key%10) {
                    found = true;
                    cur = i;
                    break;
                }
            }
            
            if(!found)
            return;
            
            key /= 10;
        }
        
        cur->val = false;
    }
    
    bool contains(int key) {
        if(key == 0)
        return root->val;
        
        Node *cur = root;
        
        while(key) {
            bool found = false;
            
            for(auto i:cur->children) {
                if(i->digit == key%10) {
                    found = true;
                    cur = i;
                    break;
                }
            }
            
            if(!found) 
            return false;
            
            key /= 10;
        }
        
        return cur->val;
    }
};

/**
 * Your MyHashSet object will be instantiated and called as such:
 * MyHashSet* obj = new MyHashSet();
 * obj->add(key);
 * obj->remove(key);
 * bool param_3 = obj->contains(key);
 */
