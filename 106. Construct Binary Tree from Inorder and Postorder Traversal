Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree.

 

Example 1:


Input: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]
Output: [3,9,20,null,null,15,7]
Example 2:

Input: inorder = [-1], postorder = [-1]
Output: [-1]


/////////////////////////////////////////////////////////////////////////// SOLUTION //////////////////////////////////////////////////////////////////////////////////////

class Solution {
public:
    TreeNode* buildTree(vector<int>& ino, vector<int>& post)
     {
        int i1 = post.size()-1;
        return solve(i1,ino,post,0,ino.size()-1);
    }

    TreeNode* solve(int &i,vector<int> &in,vector<int> &post,int l,int r)
    {
        if(l>r)
        {
            return NULL;
        }
        
        int x = r;
        while(post[i] != in[x])
        {
            x--;
        }
        i--;
        
        TreeNode* root = new TreeNode(in[x]);
        root->right = solve(i,in,post,x+1,r);
        root->left = solve(i,in,post,l,x-1);
        return root;
    }
};
