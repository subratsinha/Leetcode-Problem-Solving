Given a string array words, return the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. If no such two words exist, return 0.

 

Example 1:

Input: words = ["abcw","baz","foo","bar","xtfn","abcdef"]
Output: 16
Explanation: The two words can be "abcw", "xtfn".
Example 2:

Input: words = ["a","ab","abc","d","cd","bcd","abcd"]
Output: 4
Explanation: The two words can be "ab", "cd".
Example 3:

Input: words = ["a","aa","aaa","aaaa"]
Output: 0
Explanation: No such pair of words.



///////////////////////////////////////////////////////////////////////////// SOLUTION ///////////////////////////////////////////////////////////////////////////////////

class Solution {
public:
    int maxProduct(vector<string>& words)
    {
        int ans = 0, n = words.size();
        vector<int> v;
        for (int i = 0; i < n; i++)
        {
            int x = 0;
            for (int j = 0; j < words[i].size(); j++)
                x |= (1 << (words[i][j] - 'a'));
            v.push_back(x);
            
            for (int j = 0; j < i; j++)
            {
                if (v[i] & v[j])
                    continue;
                ans = max(ans, (int)(words[i].size() * words[j].size()));
            }
        }
        return ans;
    }
};
