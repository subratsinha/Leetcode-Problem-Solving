Given three integer arrays nums1, nums2, and nums3, return a distinct array containing all the values that are present in at least two out of the three arrays. You may return the values in any order.
 

Example 1:

Input: nums1 = [1,1,3,2], nums2 = [2,3], nums3 = [3]
Output: [3,2]
Explanation: The values that are present in at least two arrays are:
- 3, in all three arrays.
- 2, in nums1 and nums2.
Example 2:

Input: nums1 = [3,1], nums2 = [2,3], nums3 = [1,2]
Output: [2,3,1]
Explanation: The values that are present in at least two arrays are:
- 2, in nums2 and nums3.
- 3, in nums1 and nums2.
- 1, in nums1 and nums3.
Example 3:

Input: nums1 = [1,2,2], nums2 = [4,3,3], nums3 = [5]
Output: []
Explanation: No value is present in at least two arrays.
 
/////////////////////////////////////////////////////////////////////////////////////// SOLUTION /////////////////////////////////////////////////////////////////////////

class Solution {
public:
    vector<int> twoOutOfThree(vector<int>& nums1, vector<int>& nums2, vector<int>& nums3) {
        
    
        unordered_map<int,int> m1;
        unordered_map<int,int> m2;
        unordered_map<int,int> m3;
        
    
        vector<int> ans;
    
        for(auto val : nums1)
        {
            m1[val]++;
        }
        
        for(auto val : nums2)
        {
            m2[val]++;
        }
        
        for(auto val : nums3)
        {
            m3[val]++;
        }
        
        for(int i=1; i<=101; i++)
        {
            if( (m1[i]>0 && m2[i]>0) || (m2[i]>0 && m3[i]>0) || (m3[i]>0 && m1[i]>0))
                ans.push_back(i);
        }
        return ans;
 
    
    
    
    }
};
