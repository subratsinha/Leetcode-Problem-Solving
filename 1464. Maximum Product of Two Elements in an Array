Given the array of integers nums, you will choose two different indices i and j of that array. Return the maximum value of (nums[i]-1)*(nums[j]-1).
 

Example 1:

Input: nums = [3,4,5,2]
Output: 12 
Explanation: If you choose the indices i=1 and j=2 (indexed from 0), you will get the maximum value, that is, (nums[1]-1)*(nums[2]-1) = (4-1)*(5-1) = 3*4 = 12. 
Example 2:

Input: nums = [1,5,4,5]
Output: 16
Explanation: Choosing the indices i=1 and j=3 (indexed from 0), you will get the maximum value of (5-1)*(5-1) = 16.
Example 3:

Input: nums = [3,7]
Output: 12


/////////////////////////////////////////////////////////////////////////// SOLUTION /////////////////////////////////////////////////////////////////////////////////////


class Solution:
    def maxProduct(self, nums: List[int]) -> int:
        
        ans=[]
        
        for i in range(0,len(nums)):
            
            for j in range(i+1,len(nums)):
                
                val=((nums[i]-1)*(nums[j]-1))
                ans.append(val)
                
        return max(ans)
        
        
////////////////////////////////////////////////////////////////////////// CPP ////////////////////////////////////////////////////////////////////////////////////////


class Solution {
public:
    int maxProduct(vector<int>& nums) {
        
        
        int m=INT_MIN;
        
        for (int i=0; i<nums.size();i++)
        {
            nums[i]--;
        }
        
        sort(nums.begin(),nums.end());
        
        for(int i=nums.size()-1;i>=1;i--)
        {
            m=max(m,nums[i]*nums[i-1]);
        }
        
        return m;
        
    }
};
