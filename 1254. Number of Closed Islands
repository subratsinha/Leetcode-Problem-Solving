Given a 2D grid consists of 0s (land) and 1s (water).  An island is a maximal 4-directionally connected group of 0s and a closed island is an island totally (all left, top, right, bottom) surrounded by 1s.

Return the number of closed islands.

 

Example 1:



Input: grid = [[1,1,1,1,1,1,1,0],[1,0,0,0,0,1,1,0],[1,0,1,0,1,1,1,0],[1,0,0,0,0,1,0,1],[1,1,1,1,1,1,1,0]]
Output: 2
Explanation: 
Islands in gray are closed because they are completely surrounded by water (group of 1s).
Example 2:



Input: grid = [[0,0,1,0,0],[0,1,0,1,0],[0,1,1,1,0]]
Output: 1
Example 3:

Input: grid = [[1,1,1,1,1,1,1],
               [1,0,0,0,0,0,1],
               [1,0,1,1,1,0,1],
               [1,0,1,0,1,0,1],
               [1,0,1,1,1,0,1],
               [1,0,0,0,0,0,1],
               [1,1,1,1,1,1,1]]
Output: 2
 

Constraints:

1 <= grid.length, grid[0].length <= 100
0 <= grid[i][j] <=1


//////////////////////////////////////////////////////////////////////////// SOLUTION /////////////////////////////////////////////////////////////////////////////////

class Solution {
public:

vector<pair<int,int>> moves = {{0,-1},{0,1},{-1,0},{1,0}};

bool isValidIndex(int x, int y, int n, int m){
    if(x>=0 and y>=0 and x<n and y<m) return true;
    else return false;
}

void dfs(int x, int y, vector<vector<int>> &grid, vector<vector<int>> &vis, int n ,int m){
    vis[x][y]=1;
    for(auto p:moves){
        int nX=x+p.first;
        int nY=y+p.second;
        if(isValidIndex(nX,nY,n,m)){
            if(grid[nX][nY]==0 and !vis[nX][nY]){
            dfs(nX,nY,grid,vis,n,m);
            }
        }
    }
}

    int closedIsland(vector<vector<int>>& grid) {

        int n=grid.size();
        int m=grid[0].size();

        int totalCC=0;
        vector<vector<int>> vis2(n,vector<int> (m,0));
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==0 and !vis2[i][j]){
                    totalCC++;
                    dfs(i,j,grid,vis2,n,m);
                }
            }
        }

        int excludedIslands=0;
        vector<vector<int>> vis(n,vector<int> (m,0));
        for(int i=0;i<m;i++){
            if(grid[0][i]==0 and !vis[0][i]){
                excludedIslands++;
                dfs(0,i,grid,vis,n,m);
            }
        }
        for(int i=0;i<m;i++){
            if(grid[n-1][i]==0 and !vis[n-1][i]){
                excludedIslands++;
                dfs(n-1,i,grid,vis,n,m);
            }
        }
        for(int i=0;i<n;i++){
            if(grid[i][0]==0 and !vis[i][0]){
                excludedIslands++;
                dfs(i,0,grid,vis,n,m);
            }
        }
        for(int i=0;i<n;i++){
            if(grid[i][m-1]==0 and !vis[i][m-1]){
                excludedIslands++;
                dfs(i,m-1,grid,vis,n,m);
            }
        }
        return totalCC-excludedIslands;
    }
};
