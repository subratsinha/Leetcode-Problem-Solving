You are given an integer n. There is an undirected graph with n nodes, numbered from 0 to n - 1. You are given a 2D integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting nodes ai and bi.

Return the number of pairs of different nodes that are unreachable from each other.

 

Example 1:


Input: n = 3, edges = [[0,1],[0,2],[1,2]]
Output: 0
Explanation: There are no pairs of nodes that are unreachable from each other. Therefore, we return 0.
Example 2:


Input: n = 7, edges = [[0,2],[0,5],[2,4],[1,6],[5,4]]
Output: 14
Explanation: There are 14 pairs of nodes that are unreachable from each other:
[[0,1],[0,3],[0,6],[1,2],[1,3],[1,4],[1,5],[2,3],[2,6],[3,4],[3,5],[3,6],[4,6],[5,6]].
Therefore, we return 14.


/////////////////////////////////////////////////////////////////////////////////// SOLUTION /////////////////////////////////////////////////////////////////////////////


class Solution {
public:

    void dfs(vector<int> adj[], int node , vector<int>&vis, int &c){
        c++;
        vis[node] =1;
        for(auto a : adj[node]){
            if(!vis[a]){
                dfs(adj,a,vis,c);
            }
        }
    }
    long long countPairs(int n, vector<vector<int>>& ed)
     {
        vector<int> adj[n];
        for(auto a : ed){
            adj[a[0]].push_back(a[1]);
            adj[a[1]].push_back(a[0]);
        }
        vector<int> vis(n,0);
        long long ans=0;
        long long su=0;
        int c=0;
        for(int i=0;i<n;i++){
            if(!vis[i]){
                dfs(adj,i,vis,c);
                ans += su*c;
                su +=c;
                c=0;
            }
        }
        return ans;
    }
};
